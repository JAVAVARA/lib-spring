group 'com.khh.api'
version '1.0-SNAPSHOT'
apply plugin: 'base'
//apply plugin: 'java'

//외부 에서
buildscript {

    ext {
        springCloudVersion = 'Brixton.SR6'
        springBootVersion = '1.4.2.RELEASE'
        springDependencyVersion = '0.5.1.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven { url 'http://repo.springsource.org/plugins-release'}
        maven { url 'http://repo.spring.io/milestone'}
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springDependencyVersion}")

    }
}

//전체 프로젝트 적용
allprojects {
    version = "0.1.0"
}

//서브 프로젝트 적용
subprojects { subprojects ->

    apply plugin: 'groovy'
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'war'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    targetCompatibility = 1.8
    sourceCompatibility = 1.8
    //인코딩 모두 적용
    def defaultEncoding = 'UTF-8'

    //AbstractCompile 모든 JVM을 통한 컴파일일 경우
    //하위로는 GroovyCompile   JavaCompile   AbstractScalaCompile
    tasks.withType(AbstractCompile).each {
        it.options.encoding = defaultEncoding
    }

    tasks.withType(Javadoc) { Javadoc javadoc ->
        javadoc.options.encoding = defaultEncoding
        javadoc.options.addStringOption('Xdoclint:all,-missing', '-quiet')
    }

    springBoot {
        executable = true
    }

    repositories {
        maven { url "http://119.206.205.172:8081/nexus/content/repositories/releases/" }
        jcenter()
    }

//    dependencyManagement {
//        imports {
//            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
//        }
//    }

    dependencies {

        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-integration:${springBootVersion}")
        compile(group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.0.12.RELEASE')
        compile(group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.3.RELEASE')

        //devtools
        compile("org.springframework.boot:spring-boot-devtools")
        //config를위하여  config hot depoly하기위하여
        compile("org.springframework.boot:spring-boot-configuration-processor")
        //optional ("org.springframework.boot:spring-boot-configuration-processor")

        //view template  select one!
        //compile("org.springframework.boot:spring-boot-starter-groovy-templates:${springBootVersion}")
        //compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
        //compile("org.springframework.boot:spring-boot-starter-velocity:${springBootVersion}")
        /*jsp jstl viwe 쓰려면
        compile("javax.servlet:jstl");
        compile("org.apache.tomcat.embed:tomcat-embed-jasper")
        */

        compile("com.h2database:h2:1.4.192");

        compile('com.jayway.jsonpath:json-path:2.1.0')

        /* lombok*/
        compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
        /* quartz */
        compile group: 'org.quartz-scheduler', name: 'quartz', version: '1.8.6'
        // https://mvnrepository.com/artifact/javax.transaction/jta
        compile group: 'javax.transaction', name: 'jta', version: '1.1'

        /* email */
        compile group: 'javax.mail', name: 'mail', version: '1.4.7'

        /* class scaner  https://sites.google.com/site/javacornproject/corn-cps */
        compile group: 'net.sf.corn', name: 'corn-cps', version: '1.1.7'

        compile group: 'com.omnicns', name: 'common-java', version: '0.0.1'
        compile group: 'com.omnicns', name: 'common-jsp', version: '0.0.1'
        compile group: 'com.omnicns', name: 'common-spring', version: '0.0.1'

        //runtime "com.h2database:h2:1.4.+"
        compile fileTree(dir: 'libs', includes: ['*.jar'])
        testCompile ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    }
}

project(':auth') {
    dependencies {
        compile project(':core')
        compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    }
}

project(':resource') {
    dependencies {
        compile project(':core')
        //compile 'org.springframework.data:spring-data-rest-hal-browser' //tools
        compile("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")

    }
}


//==================== 별도의 실행이 필요한 task 시작 ====================

// 하위 디렉토리 생성 eclipse 일경우만 실행 합니다
task initSrc << {
    project.sourceSets*.allSource.srcDirTrees.flatten().dir.each { dir ->
        dir.mkdirs()
    }
}

// javadoc 생성 설정
task docJava(type: Javadoc) {
    source subprojects.collect {project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, 'javadoc')

    println "buildDir => ["+buildDir+ "]"

    //classpath
    classpath = files(subprojects.collect {project ->
        project.sourceSets.main.compileClasspath
    })

    println " ------------------ javadoc end ------------------"

}

//tasks.eclipse.dependsOn(initSrc)


//Wrapper 3.2.1 버전 설치
task wrapper(type: Wrapper) {
    gradleVersion = "3.2.1"
}
//==================== 별도의 실행이 필요한 task 종료 ====================