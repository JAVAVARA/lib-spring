<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

	<sec:global-method-security pre-post-annotations="enabled" secured-annotations="enabled"/>
	<sec:http pattern="/front/**" 				security="none"/>
	<sec:http pattern="/api/**" 				security="none"/>
	<sec:http pattern="/app/**" 				security="none"/>
	<sec:http pattern="/build/**" 				security="none"/>
	<sec:http pattern="/css/**" 				security="none"/>
	<sec:http pattern="/fonts/**" 				security="none"/>
	<sec:http pattern="/plugin/**" 				security="none"/>
	<sec:http pattern="/smartadmin-plugin/**"	security="none"/>
	<sec:http pattern="/styles/**"  			security="none"/>
	<sec:http pattern="/app.config.js"  		security="none"/>
	<sec:http pattern="/app.scripts.json"  		security="none"/>
	<sec:http pattern="/gulpfile.js"  			security="none"/>
	<sec:http pattern="/favicon.ico"  			security="none"/>
	
	
	<sec:http auto-config="true" use-expressions="true">
		<!-- sec:custom-filter 를사용안하고 로컬로 접근제한을 사용하고싶을때 아래와같이 처리한다
		<sec:intercept-url pattern="/admin/**" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/manager/**" 
		                   access="hasRole('ROLE_MANAGER')" />
		<sec:intercept-url pattern="/cmstiles**"
						   access="hasAuthority('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/main" access="isAuthenticated()" />
		<sec:intercept-url pattern = "/login" 	access = "permitAll"/>
		<sec:intercept-url pattern = "/logout" 	access = "permitAll"/>
		<sec:intercept-url pattern = "/"		access = "permitAll"/>
		<sec:intercept-url pattern = "/**" 		access = "permitAll"/>
		 -->
<!-- 	<sec:csrf disabled="true"/> -->
		<!-- URL 접근제한을 주기위한 셋팅 DB에서불러와서 처리한다 -->
		<sec:custom-filter ref="parancoeFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />

		
		<!-- 		
		 login-page  로그인 페이지 주소를 지정
		 username-parameter  로그인 페이지 form에 있는 username을 저장한 변수이름 지정
		 password-parameter  로그인 페이지 form에 있는 password을 저장한 변수이름 지정 
		 login-processing-url  로그인 페이지 form action에 입력할 주소 지정
		 default-target-url  로그인 성공인 경우 호출할 주소 지정
		 authentication-failure-url  로그인 실패인 경우 호출할 주소 지정
		 always-use-default-target
		-->
		<sec:form-login login-page="/" 
					username-parameter="username" 
					password-parameter="password"		
					login-processing-url="/sign/login"
					default-target-url="/" 
					authentication-failure-url="/"
					authentication-success-handler-ref="customAuthenticationSuccessHandler"
					/>
<!-- 		<sec:logout logout-url="/logout" logout-success-url="/" delete-cookies="JSESSIONID"/> -->
		<sec:logout logout-url="/sign/logout" logout-success-url="/?msg=logout" delete-cookies="JSESSIONID"  /><!-- success-handler-ref="customLogoutSuccessHandler" -->
		
		<!--권한없는 페이지 호출시 web.xml쪽에서 따로 처리해준다-->
<!-- 		<sec:access-denied-handler error-page="/error/403"/>  -->
<!-- 		<sec:access-denied-handler ref="accessDenied"/>  -->
		
		<!--Override default login and logout pages -->
        <!-- 
        <form-login login-processing-url="/login" login-page="/login.html"
                    authentication-failure-url="/login.html?error=1"
                    default-target-url="/index.html" always-use-default-target='true'/>

        <logout logout-url="/logout" logout-success-url="/login.html"/>
        <access-denied-handler error-page="/login.html?error=1"/>
         -->
         
         
		<!-- 권한없는 페이지 호출시 web.xml쪽에서 따로 처리해준다
		<sec:access-denied-handler error-page="/common/error/error403.jsp"/>
         -->
         
		<!-- 중복로그인 막아요 session cnt max 1-->
		<sec:session-management invalid-session-url="/sign/invalid" session-authentication-error-url="/sign/authentication" session-fixation-protection="newSession" > 
			<sec:concurrency-control max-sessions="1" expired-url="/sign/expired" session-registry-ref="sessionRegistry" />
		</sec:session-management>
	</sec:http>
	
	
	<sec:authentication-manager>
	    <sec:authentication-provider ref="customAuthenticationProvider"/>
<!-- 	    <sec:authentication-provider user-service-ref="customUserDetailsService"> -->
<!-- 	    	<sec:password-encoder ref="passwordEncoder" > -->
<!-- 	    	</sec:password-encoder> -->
<!-- 	    </sec:authentication-provider> -->
	</sec:authentication-manager>
	
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<bean id="parancoeFilterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" >  
		<property name="authenticationManager" ref="org.springframework.security.authenticationManager"/>
    	<property name="accessDecisionManager" ref="accessDecisionManager"/>
	    <property name="securityMetadataSource" ref="customFilterInvocationSecurityMetadataSource"/>
	</bean> 
<!-- 	<sec:filter-security-metadata-source id="securityMetadataSource" use-expressions="true"> -->
<!-- 	    <sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" /> -->
<!-- 	</sec:filter-security-metadata-source>  -->
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter">
					<property name="rolePrefix" value="" />
				</bean>
			</list>
		</constructor-arg>
		<property name="allowIfAllAbstainDecisions" value="false" />
	</bean>
	
	<!-- 초기 부트됐을때 메뉴 리스트를 가져온걸로  페이지 호출시 매번 해당페이지가 관리포인트 인지 확인처리 합니다. -->
	<!--  //여기서 지정한 권한이 있어야지만  페이지 안쪽으로 들어갈수 있다!!!!! -->
	<bean id="customFilterInvocationSecurityMetadataSource" class="com.khh.security.spring.CustomFilterInvocationSecurityMetadataSource" />
	<!-- 로그인 처리 -->
	<bean id="customPasswordEncoder" class="com.khh.security.spring.CustomPasswordEncoder" />
	<bean id="customAuthenticationProvider" class="com.khh.security.spring.CustomAuthenticationProvider"/>
	
	<!-- 로그인 완료후 처리할 handler -->
	<bean id="customAuthenticationSuccessHandler" class="com.khh.security.spring.CustomAuthenticationSuccessHandler"/>
<!-- 	<bean name="customLogoutSuccessHandler" class="CustomLogoutSuccessHandler" /> -->
	
	
	<!-- 접근제한 들어갔을때  -->
<!-- 	<bean id="accessDenied" class="CustomAccessDeniedHandler"> -->
<!-- 		<property name="errorPage" value="/error/403" /> -->
<!-- 	</bean> -->
	
	
	
</beans>
